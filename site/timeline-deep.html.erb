---
layout: timeline
show_overall: false
subtitle: YJIT Results Over Time
timeline_type: blog
---

<script>
    // D3 line graph, based on https://www.d3-graph-gallery.com/graph/line_basic.html
    // set the dimensions and margins of the graph
    var margin = {top: 10, right: 30, bottom: 70, left: 40},
        width = 800 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select("#timeline_rs_chart")
    .append("svg")
        .attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
        .attr("xmlns", "http://www.w3.org/2000/svg")
        .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
        //.attr("width", width + margin.left + margin.right)
        //.attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");

// Add X axis --> it is a date format
var x = d3.scaleTime()
    .domain([new Date(), new Date()])
    .range([ 0, width ]);
document.timeline_data.x_axis_function = x; /* Export for the event handlers */
var xAxis = d3.axisBottom(x);
var xAxisGroup = svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .attr("class", "x_axis_group")
    .call(xAxis);
xAxisGroup.selectAll("text")
    .attr("transform", "rotate(-60)")
    .style("text-anchor", "end");
document.timeline_data.x_axis = xAxis;
document.timeline_data.x_axis_group = xAxisGroup;

// Add Y axis
var y = d3.scaleLinear()
        .domain([0, 1.0])  // Dynamically generate later
        .range([ height, 0 ]);
document.timeline_data.y_axis_function = y; /* Export for the event handlers */
document.timeline_data.y_axis = d3.axisLeft(y);
document.timeline_data.top_svg_group = svg.append("g")
  .call(document.timeline_data.y_axis);

var whiskerStrokeWidth = 1.0;
var whiskerBarWidth = 5;

var clip = svg.append("defs").append("svg:clipPath")
    .attr("id", "clip")
    .append("svg:rect")
    .attr("width", width + 30 )
    .attr("height", height + 20 )
    .attr("x", 0)
    .attr("y", -20);

// Code borrowed from https://d3-graph-gallery.com/graph/line_brushZoom.html
var idleTimeout = null;

function idled() { idleTimeout = null; }

function updateChart() {
    const extent = d3.event.selection

    // If no selection, back to initial coordinate. Otherwise, update X axis domain
    if (!extent) {
        if (!idleTimeout) {
            return (idleTimeout = setTimeout(idled, 350)); // This allows to wait a little bit
        }
        x.domain(d3.extent(all_series_time_range));
    } else {
        x.domain([x.invert(extent[0]), x.invert(extent[1])]);
        // Remove the grey brush area as soon as the selection has been done
        document.timeline_data.top_svg_group.select(".brush").call(brush.move, null);
    }
    // Update axis and circle position
    // Note: this doesn't seem to work with the other update function. Why not?
    xAxisGroup.transition().duration(1000).call(xAxis)

    svg
        .selectAll("circle.whiskerdot")
        .transition().duration(1000)
        .attr("cx", function(d) { return x(d.date) } )
        .attr("cy", function(d) { return y(d.value) } )
        ;

    svg
        .selectAll("line.whiskercenter")
        .transition().duration(1000)
        .attr("x1", function(d) { return x(d.date) } )
        .attr("y1", function(d) { return y(d.value - 2 * d.stddev) } )
        .attr("x2", function(d) { return x(d.date) } )
        .attr("y2", function(d) { return y(d.value + 2 * d.stddev) } )
        ;

    svg
        .selectAll("line.whiskertop")
        .transition().duration(1000)
        .attr("x1", function(d) { return x(d.date) - whiskerBarWidth / 2.0 } )
        .attr("y1", function(d) { return y(d.value + 2 * d.stddev) } )
        .attr("x2", function(d) { return x(d.date) + whiskerBarWidth / 2.0 } )
        .attr("y2", function(d) { return y(d.value + 2 * d.stddev) } )
        ;

    svg
        .selectAll("line.whiskerbottom")
        .transition().duration(1000)
        .attr("x1", function(d) { return x(d.date) - whiskerBarWidth / 2.0 } )
        .attr("y1", function(d) { return y(d.value - 2 * d.stddev) } )
        .attr("x2", function(d) { return x(d.date) + whiskerBarWidth / 2.0 } )
        .attr("y2", function(d) { return y(d.value - 2 * d.stddev) } )
        ;

    svg
        .selectAll("path.line")
        .transition().duration(1000)
        .attr("d", d3.line()
            .x(function(d) { return x(d.date) })
            .y(function(d) { return y(d.value) })
        );
}

var brush = d3.brushX()                 // Add the brush feature using the d3.brush function
    .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area
    .on("end", updateChart);

document.timeline_data.top_svg_group
    .append("g")
    .attr("class", "brush")
    .call(brush);

var updateDomainsAndAxesFromData = buildUpdateDomainsAndAxesFromData(function(series){
  return series.value_range;
});


function updateGraphFromData() {
    updateDomainsAndAxesFromData();

    // Add top-level SVG groups for data series
    svg.selectAll("g.svg_tl_data")
        .data(data_series, (item) => item.name)
        .join("g")
            .attr("class", d => "svg_tl_data " + d.name)
            .attr("visibility", d => d.visible ? "visible" : "hidden")
            ;

    data_series.forEach(function(item) {
      var group = svg.select("svg g.svg_tl_data." + item.name);

      // Add the graph line
      group.selectAll("path")
        .data([item.data])
        .join("path")
        .attr("class", "line")
        .attr("fill", "none")
        .attr("stroke", item.color)
        .attr("stroke-width", 1.5)
        .attr("d",
          d3.line()
            .x(function(d) { return x(d.date) })
            .y(function(d) { return y(d.value) })
        ).attr("clip-path", "url(#clip)");

        // Add a circle at each datapoint
        group.selectAll("circle.whiskerdot." + item.name)
          .data(item.data, (d) => d.date)
          .join("circle")
          .attr("class", "whiskerdot " + item.name)
          .attr("fill", item.color)
          .attr("r", 4.0)
          .attr("cx", function(d) { return x(d.date) } )
          .attr("cy", function(d) { return y(d.value) } )
          .attr("data-tooltip", function(d) {
            return item.benchmark + " at " + timePrinter(d.date) + ": " +
              d.value.toFixed(1) + " sec" +
              "<br/>" + item.platform + " Ruby " + d.ruby_desc;
          })
          .attr("clip-path", "url(#clip)")
        ;

        // Add the whiskers, which are an I-shape of lines
        var middle_lines = group.selectAll("line.whiskercenter." + item.name)
        .data(item.data, (d) => d.date)
        .join("line")
        .attr("class", "whiskercenter " + item.name)
        .attr("stroke", "black")
        .attr("stroke-width", whiskerStrokeWidth)
        .attr("x1", function(d) { return x(d.date) } )
        .attr("y1", function(d) { return y(d.value - 2 * d.stddev) } )
        .attr("x2", function(d) { return x(d.date) } )
        .attr("y2", function(d) { return y(d.value + 2 * d.stddev) } )
        .attr("clip-path", "url(#clip)")
        ;

        var top_whiskers = group.selectAll("line.whiskertop." + item.name)
        .data(item.data, (d) => d.date)
        .join("line")
        .attr("class", "whiskertop " + item.name)
        .attr("stroke", "black")
        .attr("stroke-width", whiskerStrokeWidth)
        .attr("x1", function(d) { return x(d.date) - whiskerBarWidth / 2.0 } )
        .attr("y1", function(d) { return y(d.value + 2 * d.stddev) } )
        .attr("x2", function(d) { return x(d.date) + whiskerBarWidth / 2.0 } )
        .attr("y2", function(d) { return y(d.value + 2 * d.stddev) } )
        .attr("clip-path", "url(#clip)")
        ;

        var bottom_whiskers = group.selectAll("line.whiskerbottom." + item.name)
        .data(item.data, (d) => d.date)
        .join("line")
        .attr("class", "whiskerbottom " + item.name)
        .attr("stroke", "black")
        .attr("stroke-width", whiskerStrokeWidth)
        .attr("x1", function(d) { return x(d.date) - whiskerBarWidth / 2.0 } )
        .attr("y1", function(d) { return y(d.value - 2 * d.stddev) } )
        .attr("x2", function(d) { return x(d.date) + whiskerBarWidth / 2.0 } )
        .attr("y2", function(d) { return y(d.value - 2 * d.stddev) } )
        .attr("clip-path", "url(#clip)")
        ;
    });

}



// Handle legend and checkboxes
document.getElementById("bottom_selection_checkboxes").style.display = "block";
var checkboxes = document.querySelectorAll("#bottom_selection_checkboxes li input");

function setHashParamFromCheckboxes() {
  //console.log("setHashParamFromCheckboxes");
  var newHash = "";
  checkboxes.forEach(function (cb) {
    if(cb.checked) {
      var bench = cb.getAttribute("data-benchmark");
      newHash += "+" + bench
    }
  });
  newHash = newHash.slice(1); // Remove extra leading plus

  window.location.hash = newHash;
}

var updateAllFromCheckbox = buildUpdateAllFromCheckbox(function(series, bench){ 
  return series.name == "prod_ruby_with_yjit-" + bench
})

setupTimeline({
  timelineType: <%= timeline_type.inspect %>

});
</script>
