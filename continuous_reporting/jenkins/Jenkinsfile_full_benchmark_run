// This run the full benchmarks twice a day, using the configurable run with specific settings.

pipeline {
    agent any

    options {
        // Timeout counter starts AFTER (top-level) agent is allocated.
        // Average run time is currently 9 hours and 8 minutes.
        timeout(time: 12, unit: 'HOURS')
    }

    triggers {
        // Currently UTC (likely whatever time jenkins and/or its server are configured to use).
        cron 'H 6,19 * * *'
    }

    parameters {
        string(name: 'RUBY_VERSION', defaultValue: 'master', description: 'what revision of Ruby to build')
        string(name: 'YJIT_METRICS_VERSION', defaultValue: 'main', description: 'what revision of yjit-metrics to build with')
        string(name: 'YJIT_BENCH_VERSION', defaultValue: 'main', description: 'what revision of yjit-bench to build with')
        // For now, no yjit_extra_bench for optional benchmarks

        booleanParam(name: 'DO_FULL_REBUILD', defaultValue: true, description: 'whether to remove all appropriate Ruby and gem directories to ensure a clean rebuild (note: slow)')

        string(name: 'SLACK_FAILURE_NOTIFY', defaultValue: '#yjit-benchmark-ci', description: 'What Slack channel(s) and Member ID(s) to notify in case of failure, comma-delimited')
    }

    environment {
        BUNDLE_DEPLOYMENT = 'true'
        SLACK_OAUTH_TOKEN = credentials('684cd699-feae-4ef1-8483-e71440a73fcd')
        NOTIFIER_ARGS = "--template build_status --channels \"${params.SLACK_FAILURE_NOTIFY}\""
    }

    stages {
        stage('schedule parameterized benchmarking run') {
            steps {
              script {
                job_name = 'benchmark_configurable_run'
                // https://www.jenkins.io/doc/pipeline/steps/pipeline-build-step/
                result = build(
                  job: job_name,
                  parameters: [
                    string(name: 'RUBY_VERSION', value: params.RUBY_VERSION),
                    string(name: 'YJIT_METRICS_VERSION', value: params.YJIT_METRICS_VERSION),
                    string(name: 'YJIT_BENCH_VERSION', value: params.YJIT_BENCH_VERSION),
                    string(name: 'BENCH_TYPE', value: 'default'),
                    string(name: 'DATA_DIR', value: 'continuous_reporting/data'),
                    booleanParam(name: 'DO_FULL_REBUILD', value: params.DO_FULL_REBUILD),
                    booleanParam(name: 'WITH_X86_TRUFFLE', value: true)
                  ],
                  propagate: false,
                )
                // Must grant "Permission to Copy Artifact" in configuration for benchmark_configurable_run.
                copyArtifacts(
                  projectName: job_name,
                  filter: "results/*.json",
                  selector: specific("${result.number}"),
                  target: "results",
                  flatten: true,
                )
                if( result.getResult() != "SUCCESS" ){
                  error(result.getResult())
                }
              }
            }
        }
    }

    post {
        success {
            sh "ls ./results/*.json || true"
            sh "rm -rvf ./results/"
        }
        failure {
            sh "ls ./results/*.json || true"
            sh "bash -l -c 'chruby 3.0.2 && bundle'"
            sh "bash -l -c 'chruby 3.0.2 && ruby continuous_reporting/slack_build_notifier.rb $NOTIFIER_ARGS --properties STATUS=fail results/*.json'"
            sh "rm -rvf ./results/"
        }
    }

}
