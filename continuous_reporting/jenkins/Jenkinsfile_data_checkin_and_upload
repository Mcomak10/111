// On-demand Jenkins data checkin

// Strings referencing env vars.
// We will interpolate this into the command and the shell will evaluate the env vars.
// Each stage should have `environment { SSH_HOST = credential(...) }` for the appropriate target server.
ssh_args = '-o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15 -o "User=$SSH_USER" -i "$SSH_KEYFILE"'
ssh_host = '$SSH_HOST'
def ssh(shell_command, opts = [:]) {
  println("ssh: ${shell_command}")
  sh([script: "#!/bin/bash -e\nssh $ssh_args $ssh_host bash -e <<SSHEOF\n${shell_command}\nSSHEOF\n"] + opts)
}

def task() {
  ssh "uname -a"
  ssh "cd ym/yjit-metrics && git pull"
  ssh "ym/yjit-metrics/continuous_reporting/gh_tasks/commit_benchmark_data.sh"
}

pipeline {
    agent any

    options {
        // Throttle options on multiple steps are deadlocking. Apparently the plugin people know there's a problem,
        // but don't have a great fix. Joy. So we throttle at the top level here.
        throttleJobProperty(
            categories: ['Build that needs exclusive use of x86_64 AWS worker (1)', 'Build that needs exclusive use of AARCH64 AWS worker (1)'],
            throttleEnabled: true,
            throttleOption: 'category'
        )
    }

    stages {
        // This stage commits and pushes the benchmark data from its directory, but doesn't get it there from yjit-metrics/continuous_reporting/data
        stage('data checkin') {
            parallel {
                stage('data checkin x86_64') {
                    agent any
                    environment {
                      SSH_HOST = credentials('2ea5f8cb-6fab-4454-b7cb-46ca2fd3cba7')
                    }
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-x86', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                            script {
                                task()
                            }

                        }
                    }
                }
                stage('data checkin AARCH64') {
                    agent any
                    environment {
                      SSH_HOST = credentials('86e5f9a8-4c3a-4789-92ab-d617fba356e8')
                    }
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-arm', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                            script {
                                task()
                            }
                        }
                    }
                }
            }
        }
    }
}
