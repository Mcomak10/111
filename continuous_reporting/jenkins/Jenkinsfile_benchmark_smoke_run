// Use a Jenkinsfile pipeline to run a single-iter all-benchmarks 'smoke test' across worker servers.

// See the full-benchmark-run Jenkinsfile for more documentation and commentary.

// AARCH64 SSH Key Credentials
//withCredentials([sshUserPrivateKey(credentialsId: '8f1183b4-3eae-40cc-8ef5-afce3637b181', keyFileVariable: 'FILENAME_VAR', usernameVariable: 'USERNAME_VAR')]) {
//    // some block
//}

pipeline {
    agent any

    parameters {
        string(name: 'RUBY_VERSION', defaultValue: 'master', description: 'what revision of Ruby to build')

        string(name: 'YJIT_METRICS_VERSION', defaultValue: 'main', description: 'what revision of yjit-metrics to build with')
        string(name: 'YJIT_BENCH_VERSION', defaultValue: 'main', description: 'what revision of yjit-bench to build with')
        //string(name: 'RUBY_REPO', defaultValue: '', description: 'what repo to build Ruby from')

        // The benchmark timestamp can't be input manually, so it's not a parameter here
    }

    environment {
        // docs: https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials
        AWS_INSTANCE_X86_64 = credentials('2ea5f8cb-6fab-4454-b7cb-46ca2fd3cba7')  // get IP address or name
        AWS_INSTANCE_AARCH64 = credentials('86e5f9a8-4c3a-4789-92ab-d617fba356e8') // get IP address or name
    }

    options {
        // Throttle options on multiple steps are deadlocking. Apparently the plugin people know there's a problem,
        // but don't have a great fix. Joy. So we throttle at the top level here.
        throttleJobProperty(
            categories: ['Build that needs exclusive use of x86_64 AWS worker (1)'],
            throttleEnabled: true,
            throttleOption: 'category'
        )
    }

    stages {
        stage('generate_params') {
            steps {
                // Don't want the keyfile to exist for long, so use a limited-scope block for withCredentials here.
                // There's probably a better way to do this if I understood the Jenkinsfile DSL better.
                withCredentials([sshUserPrivateKey(credentialsId: '5a088c5c-117f-4647-982b-954973d217f9', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                    script {
                        env.SSH_USER = SSH_USER
                        env.SSH_KEYFILE = SSH_KEYFILE
                        env.CRUBY_NAME = params.RUBY_VERSION
                        env.YJIT_METRICS_NAME = params.YJIT_METRICS_VERSION
                        env.YJIT_BENCH_NAME = params.YJIT_BENCH_VERSION
                        env.SSH_ARGS = '-o StrictHostKeyChecking=no -i $SSH_KEYFILE -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15'
                        env.SSH_HOST = '$SSH_USER@$AWS_INSTANCE_X86_64'
                    }

                    sh "ssh $SSH_ARGS $SSH_HOST \"cd ym/yjit-metrics && git fetch && git checkout $YJIT_METRICS_NAME\""
                    sh "ssh $SSH_ARGS $SSH_HOST \"bash -l -c \'cd ym/yjit-metrics/ && YJIT_METRICS_NAME=$YJIT_METRICS_NAME YJIT_BENCH_NAME=$YJIT_BENCH_NAME CRUBY_NAME=$CRUBY_NAME . ./continuous_reporting/gh_tasks/generate_bench_params.sh\'\""
                    sh "ssh $SSH_ARGS $SSH_HOST \"cd ym/yjit-metrics && cat bench_params.json\""
                    sh "scp $SSH_ARGS $SSH_HOST:~/ym/yjit-metrics/bench_params.json ."
                    sh "ssh $SSH_ARGS $SSH_HOST rm ym/yjit-metrics/bench_params.json"  // Don't leave params sitting around between jobs
                }

                // docs: https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build
                stash includes: 'bench_params.json', name: 'bench_params'
            }
        }

        // Run the various benchmarks in parallel to the extent possible
        stage('benchmarking') {
            parallel {
                stage('benchmarking x86_64') {
                    agent any
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: '5a088c5c-117f-4647-982b-954973d217f9', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                            script {
                                env.SSH_USER = SSH_USER
                                env.SSH_KEYFILE = SSH_KEYFILE
                                env.SSH_ARGS = '-o StrictHostKeyChecking=no -i $SSH_KEYFILE -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15'
                                env.SSH_HOST = '$SSH_USER@$AWS_INSTANCE_X86_64'
                                env.SSH_CMD = 'ssh $SSH_ARGS $SSH_HOST '
                            }

                            unstash 'bench_params' // Get timestamp, CRuby SHA, yjit_metrics SHA, etc for this build
                            sh "scp $SSH_ARGS bench_params.json $SSH_HOST:~/ym/yjit-metrics/"
                            sh "ssh $SSH_ARGS $SSH_HOST \"cd ym/yjit-metrics && uname -a && git pull\""
                            // No full Ruby rebuild for smoke runs - we want this to be reasonably quick.
                            sh "ssh $SSH_ARGS $SSH_HOST \"bash -l -c 'BENCH_PARAMS=bench_params.json . ./ym/yjit-metrics/continuous_reporting/gh_tasks/run_single_iter_benchmarks.sh'\""

                            sh "ssh $SSH_ARGS $SSH_HOST \"rm ym/yjit-metrics/bench_params.json\""  // Don't leave params sitting around between jobs
                        }
                    }
                }
            }
        }
    }
}
