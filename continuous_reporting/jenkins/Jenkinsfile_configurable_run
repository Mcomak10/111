// This Jenkinsfile is a conversion of the older GitHub Actions workflow for benchmarking.

// This version allows for a huge number of different parameters - where to build from, whether
// to erase-and-rebuild Ruby and so on. As a result, it's not convenient for day-to-day use.
// Instead, other builds (like the smoke test and full benchmarking run Jenkinsfiles) wrap
// this, in order to provide something with good defaults, where Jenkins can usefully
// estimate the build time, and for which we can give more-specific Slack notifications.

// The division between gh_tasks/ shellscripts and continuous_reporting/ Ruby files
// is a bit weirder. In theory it's to let the shellscripts juggle the Ruby configuration,
// which would be painful to manage directly from a Jenkinsfile or GitHub Actions workflow,
// but in practice the current version is a mess too.

// Jenkinsfile documentation:
//
// * Groovy Multiline Strings: https://stackoverflow.com/questions/5079797/whats-wrong-with-groovy-multi-line-string
// * Groovy ternary or coalescing operators: https://www.danvega.dev/blog/2013/08/22/groovy-ternary-operator/

// sh function: https://www.jenkins.io/doc/pipeline/steps/workflow-durable-task-step/#sh-shell-script

// Future improvements:
//
// * It would be really nice to *not* use throttling and SSH to do this with workers. But we'd need to limit the executors
//   per Jenkins agent to 1, but only for certain Jenkins agents. Or throttle all builds on a particular agent. I'm not
//   sure there's an easy way to do either one.

// Strings referencing env vars.
// We will interpolate this into the command and the shell will evaluate the env vars.
// Each stage should have `environment { SSH_HOST = credential(...) }` for the appropriate target server.
ssh_args = '-o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15 -o "User=$SSH_USER" -i "$SSH_KEYFILE"'
ssh_host = '$SSH_HOST'
def ssh(shell_command, opts = [:]) {
  println("ssh: ${shell_command}")
  sh([script: "#!/bin/bash -e\nssh $ssh_args $ssh_host bash -e <<SSHEOF\n${shell_command}\nSSHEOF\n"] + opts)
}

def scp(src, dest) {
  sh "scp $ssh_args $src $dest"
}

results = [:]
def benchmark_and_upload(arch) {
  // Use specified yjit-metrics repo and name
  ssh "YJIT_METRICS_REPO=${params.YJIT_METRICS_REPO} YJIT_METRICS_NAME=${params.YJIT_METRICS_VERSION} ym/yjit-metrics/continuous_reporting/gh_tasks/git_update_yjit_metrics_repo.sh"

  unstash 'bench_params' // Get timestamp, CRuby SHA, yjit_metrics SHA, etc for this build
  scp("bench_params.json", "$ssh_host:~/ym/yjit-metrics/")

  // Note: param-generation and benchmarking runs should NOT do a git clean to avoid wiping out successful benchmarking results, from
  // runs when benchmarking succeeded but checking/reporting failed.
  results[arch] = ssh("BENCH_PARAMS=bench_params.json ym/yjit-metrics/continuous_reporting/gh_tasks/run_benchmarks.sh", [returnStatus: true])

  result_dir = "results"
  // Remove any leftover results from prior runs.
  sh "rm -vrf ./$result_dir; mkdir -p $result_dir"

  // Copy newly created data files to local dir for archiving.
  scp("$ssh_host:~/ym/yjit-metrics/${params.DATA_DIR}/'*.json'", "./${result_dir}/")
  archiveArtifacts(artifacts: "${result_dir}/*.json", allowEmptyArchive: true)

  ssh "ym/yjit-metrics/continuous_reporting/gh_tasks/commit_benchmark_data.sh"

  ssh "rm ym/yjit-metrics/bench_params.json"  // Don't leave params sitting around between jobs
}

pipeline {
    agent any

    parameters {
        string(name: 'RUBY_VERSION', defaultValue: 'master', description: 'what revision of Ruby to build')
        string(name: 'RUBY_REPO', defaultValue: 'https://github.com/ruby/ruby.git', description: 'what repo to build Ruby from')

        string(name: 'YJIT_METRICS_VERSION', defaultValue: 'main', description: 'what revision of yjit-metrics to build with')
        string(name: 'YJIT_METRICS_REPO', defaultValue: 'https://github.com/Shopify/yjit-metrics.git', description: 'what yjit-metrics repo to build with')
        string(name: 'YJIT_BENCH_VERSION', defaultValue: 'main', description: 'what revision of yjit-bench to build with')
        string(name: 'YJIT_BENCH_REPO', defaultValue: 'https://github.com/Shopify/yjit-bench.git', description: 'what yjit-bench repo to build with')

        // For now, no yjit_extra_bench for optional benchmarks

        string(name: 'BENCH_TYPE', defaultValue: 'default', description: 'Benchmark type -- "default" uses variable warmup file and all benchmarks, "smoketest" is one iter of all benchmarks, can also give full specification, e.g. --warmup-itrs=0 --min-bench-time=0.0 --min-bench-itrs=1 --on-errors=die --configs=PLATFORM_prod_ruby_no_jit,PLATFORM_prod_ruby_with_yjit')

        string(name: 'DATA_DIR', defaultValue: 'continuous_reporting/data', description: 'Data directory for output; continuous_reporting/data will populate speed.yjit.org; use single_iter_data to discard results')

        booleanParam(name: 'DO_FULL_REBUILD', defaultValue: true, description: 'whether to remove all appropriate Ruby and gem directories to ensure a clean rebuild (note: slow)')

        booleanParam(name: 'WITH_X86_TRUFFLE', defaultValue: false, description: 'use presumed excess x86 runtime to run TruffleRuby yjit-bench iterations')

        // The benchmark timestamp can't be input manually, so it's not a parameter here
    }

    options {
        // Throttle options on multiple steps are deadlocking. Apparently the plugin people know there's a problem,
        // but don't have a great fix. Joy. So we throttle at the top level here.
        throttleJobProperty(
            categories: ['Build that needs exclusive use of x86_64 AWS worker (1)', 'Build that needs exclusive use of AARCH64 AWS worker (1)'],
            throttleEnabled: true,
            throttleOption: 'category'
        )
    }

    environment {
      BUNDLE_DEPLOYMENT = 'true'
    }

    stages {
        stage('generate_params') {
            environment {
              SSH_HOST = credentials('2ea5f8cb-6fab-4454-b7cb-46ca2fd3cba7')
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-x86', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                  script {
                    // Note: param-generation and benchmarking runs should NOT do a git clean to avoid wiping out successful benchmarking results, from
                    // runs when benchmarking succeeded but checking/reporting failed.

                    // Use specified yjit-metrics repo and name
                    ssh "YJIT_METRICS_REPO=${params.YJIT_METRICS_REPO} YJIT_METRICS_NAME=${params.YJIT_METRICS_VERSION} ym/yjit-metrics/continuous_reporting/gh_tasks/git_update_yjit_metrics_repo.sh"

                    // BENCH_TYPE probably won't contain any troublesome characters (besides spaces),
                    // but the simplest thing to do is wrap the whole thing in single quotes
                    // and then replace any single quotes in the param with a break in the string and an escaped character.
                    ssh "cd ym/yjit-metrics && FULL_REBUILD=${params.DO_FULL_REBUILD ? "yes" : "no"} BENCH_TYPE='${params.BENCH_TYPE.replaceAll("[']", { c -> "'\\$c'" })}' YJIT_METRICS_NAME=${params.YJIT_METRICS_VERSION} YJIT_METRICS_REPO=${params.YJIT_METRICS_REPO} YJIT_BENCH_NAME=${params.YJIT_BENCH_VERSION} YJIT_BENCH_REPO=${params.YJIT_BENCH_REPO} CRUBY_NAME=${params.RUBY_VERSION} CRUBY_REPO=${params.RUBY_REPO} BENCH_DATA_DIR=${params.DATA_DIR} continuous_reporting/gh_tasks/generate_bench_params.sh"
                    ssh "cat ym/yjit-metrics/bench_params.json"
                    scp "$ssh_host:~/ym/yjit-metrics/bench_params.json", "."
                    ssh "rm ym/yjit-metrics/bench_params.json"  // Don't leave params sitting around between jobs
                  }
                }

                // docs: https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build
                stash includes: 'bench_params.json', name: 'bench_params'
            }
        }

        stage('benchmarking and data upload') {
            parallel {
                stage('benchmarking and data upload x86_64') {
                    environment {
                      SSH_HOST = credentials('2ea5f8cb-6fab-4454-b7cb-46ca2fd3cba7')
                    }
                    agent any
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-x86', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                          script {
                            benchmark_and_upload('x86')

                            if (params.WITH_X86_TRUFFLE) {
                              ssh "ym/yjit-metrics/continuous_reporting/gh_tasks/truffle_x86_benchmarks.sh || echo ignoring failure"
                            }
                          }
                        }
                    }
                }
                stage('benchmarking and data upload AARCH64') {
                    agent any
                    environment {
                      SSH_HOST = credentials('86e5f9a8-4c3a-4789-92ab-d617fba356e8')
                    }
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-arm', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                          script {
                            benchmark_and_upload('arm')
                          }
                        }
                    }
                }
            }
        }

        stage('reporting') {
            agent any
            environment {
              SSH_HOST = credentials('2ea5f8cb-6fab-4454-b7cb-46ca2fd3cba7')
            }

            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-x86', keyFileVariable: 'SSH_KEYFILE', usernameVariable: 'SSH_USER')]) {
                  script {
                    ssh "cd ym/raw-benchmark-data && git pull"
                    ssh "YJIT_METRICS_REPO=${params.YJIT_METRICS_REPO} YJIT_METRICS_NAME=${params.YJIT_METRICS_VERSION} ym/yjit-metrics/continuous_reporting/gh_tasks/git_update_yjit_metrics_repo.sh"
                    ssh "ym/yjit-metrics/continuous_reporting/gh_tasks/report_and_upload.sh"

                    // The .max() method is not allowed without granting explicit access in jenkins.
                    if (results.values().sort().reverse().find {e -> e > 0}) {
                      error("Build failed: ${results}")
                    }
                  }
                }
            }
        }
    }
}
