name: Scheduled benchmarking, reporting and publishing
on:
  #schedule:
    # Run twice daily at 4:05 am and 8:05 pm
    #- cron: '05 4,20 * * *'

    # Run more often so I can debug
    #- cron: '05 05,07,09,11,13,15,17,19,21 * * *'

    # Run very frequently
    #- cron: '05,35 05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21 * * *'
  workflow_dispatch:

jobs:
  gen_job_id:
    runs-on: ubuntu-latest
    outputs:
      job_timestamp: ${{ steps.step1.outputs.timestamp }}
    steps:
      - name: Generate a job ID
        id: step1
        shell: bash
        run: |
          export JOB_TIMESTAMP=$(date +"%Y-%m-%d-%H%M%S")
          echo "Timestamp is \"$JOB_TIMESTAMP\""
          echo "::set-output name=timestamp::$JOB_TIMESTAMP"
  benchmarks_x86:
    runs-on: ubuntu-latest
    needs: gen_job_id
    steps:
      - name: SSH to x86_64 CI instance to run benchmarks
        env:
          AWS_INSTANCE: ${{ secrets.CI_AWS_INSTANCE }}
          BENCH_TS: ${{ needs.gen_job_id.outputs.job_timestamp }}
        run: |
          set -e
          set -x
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "cd ym/yjit-metrics && uname -a && git pull"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c '. ./ym/yjit-metrics/continuous_reporting/gh_tasks/fully_rebuild_rubies.sh'"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c 'BENCH_TS=$BENCH_TS . ./ym/yjit-metrics/continuous_reporting/gh_tasks/run_benchmarks.sh'"
          rm -f id_benchmark_ci_rsa
  benchmarks_arm:
    runs-on: ubuntu-latest
    needs: gen_job_id
    steps:
      - name: SSH to AARCH64 CI instance to run benchmarks
        env:
          AWS_INSTANCE: ${{ secrets.CI_AWS_ARM_INSTANCE }}
          BENCH_TS: ${{ needs.gen_job_id.outputs.job_timestamp }}
        run: |
          set -e
          set -x
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "cd ym/yjit-metrics && uname -a && git pull"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c '. ./ym/yjit-metrics/continuous_reporting/gh_tasks/fully_rebuild_rubies.sh'"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c 'BENCH_TS=$BENCH_TS . ./ym/yjit-metrics/continuous_reporting/gh_tasks/run_benchmarks.sh'"
          rm -f id_benchmark_ci_rsa
  benchmarks_test_reports_x86:
    runs-on: ubuntu-latest
    needs: benchmarks_x86
    steps:
      - name: SSH to x86_64 CI instance to test benchmark data files are valid
        env:
          AWS_INSTANCE: ${{ secrets.CI_AWS_INSTANCE }}
        run: |
          set -e
          set -x
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "cd ym/yjit-metrics && uname -a && git clean -d -f reports _includes && git pull"
          # TODO: when we have better ARM64 reporting, change this to check_reporting, not check_reporting_minimal
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c '. ./ym/yjit-metrics/continuous_reporting/gh_tasks/check_reporting_minimal.sh'"
          rm -f id_benchmark_ci_rsa
  benchmarks_test_reports_arm:
    runs-on: ubuntu-latest
    needs: benchmarks_arm
    steps:
      - name: SSH to AARCH64 CI instance to validate benchmark data files
        env:
          AWS_INSTANCE: ${{ secrets.CI_AWS_ARM_INSTANCE }}
        run: |
          set -e
          set -x
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "cd ym/yjit-metrics && uname -a && git clean -d -f reports _includes && git pull"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c '. ./ym/yjit-metrics/continuous_reporting/gh_tasks/check_reporting_minimal.sh'"
          rm -f id_benchmark_ci_rsa
  benchmarks_checkin_arm:
    runs-on: ubuntu-latest
    needs: [benchmarks_test_reports_arm]
    steps:
      - name: SSH to AARCH64 CI instance and commit/push benchmark raw data
        env:
          AWS_INSTANCE: ${{ secrets.CI_AWS_ARM_INSTANCE }}
        run: |
          set -e
          set -x
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c '. ./ym/yjit-metrics/continuous_reporting/gh_tasks/commit_benchmark_data.sh'"
          rm -f id_benchmark_ci_rsa
  benchmarks_checkin_x86:
    runs-on: ubuntu-latest
    needs: [benchmarks_test_reports_x86]
    steps:
      - name: SSH to AARCH64 CI instance and commit/push benchmark raw data
        env:
          AWS_INSTANCE: ${{ secrets.CI_AWS_INSTANCE }}
        run: |
          set -e
          set -x
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c '. ./ym/yjit-metrics/continuous_reporting/gh_tasks/commit_benchmark_data.sh'"
          rm -f id_benchmark_ci_rsa
  reporting_and_upload:
    runs-on: ubuntu-latest
    needs: [benchmarks_checkin_x86, benchmarks_checkin_arm]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - name: SSH to x86_64 CI instance to run reports and upload results
        run: |
          set -e
          set -x
          export AWS_INSTANCE=${{ secrets.CI_AWS_INSTANCE }}
          cat << EOF > ./id_benchmark_ci_rsa
          ${{ secrets.AWS_INSTANCE_PRIVATE_KEY }}
          EOF
          chmod go-rwx ./id_benchmark_ci_rsa
          export SSH_ARGS="-o StrictHostKeyChecking=no -i ./id_benchmark_ci_rsa -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15"
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "cd ym/yjit-metrics && git clean -d -f reports _includes && git pull"
          # This process needs a GitHub token if we start automatically filing perf issues again; also if we clone/modify the repo's remote.
          # But the one we could get here doesn't work - it's guaranteed stale. Can we use the one *from* the .git directory?
          ssh $SSH_ARGS ubuntu@$AWS_INSTANCE "bash -l -c './ym/yjit-metrics/continuous_reporting/gh_tasks/report_and_upload.sh'"
