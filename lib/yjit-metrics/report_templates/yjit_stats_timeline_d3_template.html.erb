<!-- This is the full-size timeline report, for the deep dive -->

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<div id="stat_field_dropdown">
  <% stats_fields = @series[1][:data][0].keys - [:time, :ruby_desc] %>
  <select name="stat_types" id="stat_field_dropdown_select" selected="<%= stats_fields[0] %>">
    <% stats_fields.each do |field| %> <option value="<%= field %>"><%= field %></option> <% end %>
  </select>
</div>

<div id="timeline_rs_chart"></div>

<%
# We want different colours, but we want them saturated so that white text shows up on top of them.
# This is the Munin palette from Shutterstock Rickshaw
colors = [
    '#00cc00',
    '#0066b3',
    '#ff8000',
    '#ffcc00',
    '#330099',
    '#990099',
    '#ccff00',
    '#ff0000',
    '#808080',
    '#008f00',
    '#00487d',
    '#b35a00',
    '#b38f00',
    '#6b006b',
    '#8fb300',
    '#b30000',
    '#bebebe',
    '#80ff80',
    '#80c9ff',
    '#ffc080',
    '#ffe680',
    '#aa80ff',
    '#ee00cc',
    '#ff8080',
    '#666600',
    '#ffbfff',
    '#00ffcc',
    '#cc6699',
    '#999900'
];
%>

<div id="legend_parent_flexbox" style="display: flex; justify-content: center;">
  <div id="timeline_legend_child">
    <ul style="display:inline-block">
  <% @series.each_with_index do |this_series, color_index|
       color = colors[color_index % colors.size]
     %>
  <li style="display: none" data-benchmark="<%= this_series[:benchmark] %>"><span style='background: <%= color %>'>&nbsp;&nbsp; <strong style="color: white;"><%= this_series[:benchmark] %></strong> &nbsp;&nbsp;</span> </li>
  <% end %>
    </ul>
  </div>
</div>

<div id="bottom_selection_checkboxes" style="display: none;">
  <ul>
    <% @series.each_with_index do |this_series, color_index|
         color = colors[color_index % colors.size]
     %>
    <li><input type="checkbox" data-benchmark="<%= this_series[:benchmark]%>" /> <span style='background: <%= color %>'>&nbsp;&nbsp; <strong style="color: white;"><%= this_series[:benchmark] %></strong> &nbsp;&nbsp;</span>
    </li>
  <% end %>
  </ul>
</div>

<script>

// D3 line graph, based on https://www.d3-graph-gallery.com/graph/line_basic.html

// set the dimensions and margins of the graph
var margin = {top: 10, right: 30, bottom: 70, left: 40},
    width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#timeline_rs_chart")
  .append("svg")
    .attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
    .attr("xmlns", "http://www.w3.org/2000/svg")
    .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")
    //.attr("width", width + margin.left + margin.right)
    //.attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

var timeParser = d3.timeParse("%Y %m %d %H %M %S");
var timePrinter = d3.timeFormat("%b %d %I%p");
var data_series = [
    <% @series.each_with_index do |this_series, color_index| %>
    {
        name: <%= this_series[:name].inspect %>,
        config: <%= this_series[:config].inspect %>,
        benchmark: <%= this_series[:benchmark].inspect %>,
        visible: false,
        data: [ <%= this_series[:data].map do |hash|
            "{time: timeParser(#{hash[:time].inspect })," + stats_fields.map { |k| "#{k}: #{hash[k].inspect}" }.join(",") + ", ruby_desc: #{hash[:ruby_desc].inspect} }"
        end.join(",")
        %>],
        color: <%= colors[color_index % colors.size].inspect %>,
        time_range: [ timeParser(<%= this_series[:data][0][:time].inspect %>), timeParser(<%= this_series[:data][-1][:time].inspect %>) ],
        value_range: { <% stats_fields.each do |field| %>
            <%= field %>: [ <%= this_series[:data].map { |pt| pt[field] }.compact.min %>, <%= this_series[:data].map { |pt| pt[field] }.compact.max %> ],
            <% end %>
            last: []
        }
    },
    <% end %>
    {}
]
data_series.pop();

var all_series_time_range = [ timeParser(<%= @series.map { |this_series| this_series[:data][0][:time] }.min.inspect %>), timeParser(<%= @series.map { |this_series| this_series[:data][-1][:time] }.max.inspect %>) ];

document.timeline_data = {} // For sharing data w/ handlers
document.timeline_data.current_stat = "<%= stats_fields[0] %>";

// Add X axis --> it is a date format
var x = d3.scaleTime()
  .domain(d3.extent(all_series_time_range))
  .range([ 0, width ]);
document.timeline_data.x_axis_function = x; /* Export for the event handlers */
var xAxis = svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x))
  .selectAll("text")
    .attr("transform", "rotate(-60)")
    .style("text-anchor", "end");

// Add Y axis
var y = d3.scaleLinear()
  .domain([0, 1.0])  // Dynamically generate later
  .range([ height, 0 ]);
document.timeline_data.y_axis_function = y; /* Export for the event handlers */
document.timeline_data.y_axis = d3.axisLeft(y);
let formatValue = d3.format(".2s");
document.timeline_data.y_axis.tickFormat(function (d) { return formatValue(d); });
document.timeline_data.top_svg_group = svg.append("g")
  .call(document.timeline_data.y_axis);

var clip = svg.append("defs").append("svg:clipPath")
    .attr("id", "clip")
    .append("svg:rect")
    .attr("width", width + 30 )
    .attr("height", height )
    .attr("x", 0)
    .attr("y", 0);




// Code borrowed from https://d3-graph-gallery.com/graph/line_brushZoom.html
var idleTimeout = null;

function idled() { idleTimeout = null; }


function updateChart() {

  const extent = d3.event.selection

  // If no selection, back to initial coordinate. Otherwise, update X axis domain
  if (!extent) {
    if (!idleTimeout) {
      return (idleTimeout = setTimeout(idled, 350)); // This allows to wait a little bit
    }
    x.domain(d3.extent(all_series_time_range));
  } else {
    x.domain([x.invert(extent[0]), x.invert(extent[1])]);
    document.timeline_data.top_svg_group.select(".brush").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done
  }
  // Update axis and circle position
  xAxis.transition().duration(1000).call(d3.axisBottom(x))
  svg
    .selectAll(".circle")
    .transition().duration(1000)
      .attr("cx", function(d) { return x(d.time) } )
      .attr("cy", function(d) { return y(d[document.timeline_data.current_stat]) } )


  svg
    .selectAll(".line")
    .transition().duration(1000)
      .attr("d", d3.line()
        .x(function(d) { return x(d.time) })
        .y(function(d) { return y(d[document.timeline_data.current_stat]) })
      );


}

var brush = d3.brushX()                 // Add the brush feature using the d3.brush function
  .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area
  .on("end", updateChart)

document.timeline_data.top_svg_group
  .append("g")
  .attr("class", "brush")
  .call(brush);


data_series.forEach(function(item) {
    group = svg.append("g").attr("class", item.name).attr("visibility", "hidden" )



    // Add the graph line
    var lines = group.append("path")
      .datum(item.data)
      .attr("class", "line")
      .attr("fill", "none")
      .attr("stroke", item.color)
      .attr("stroke-width", 1.5)
      .attr("d", d3.line()
        .x(function(d) { return x(d.time) })
        .y(function(d) { return y(d[document.timeline_data.current_stat]) })
      ).attr("clip-path", "url(#clip)");

    // Add a circle at each datapoint
    var circles = group.selectAll("circle.centerdot." + item.name)
      .data(item.data);

    circles.enter().append("circle")
      .attr("class", "centerdot " + item.name + " circle")
      .attr("fill", item.color)
      .attr("r", 1.5)
      .attr("cx", function(d) { return x(d.time) } )
      .attr("cy", function(d) { return y(d[document.timeline_data.current_stat]) } )
      .attr("data-tooltip", function(d) { return item.benchmark + " at " + timePrinter(d.time) + ": " + (d[document.timeline_data.current_stat]) + "<br/>Ruby " + d.ruby_desc; } )
      .attr("clip-path", "url(#clip)");
});

</script>
