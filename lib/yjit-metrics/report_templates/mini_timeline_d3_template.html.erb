<!-- This is the smaller four-up timeline report shown on the front page -->

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<% if @series.size != 4 && @series.size != 8
       raise "The mini_timeline graph assumes a 2x2 grid of benchmarks - either 4 series or 8 for multiplatform, not #{@series.size.inspect}!"
   end %>

<%
# We want different colours, but we want them saturated so that white text shows up on top of them.
# This is the Munin palette from Shutterstock Rickshaw
colors = [
    '#00cc00',
    '#0066b3',
    '#ff8000',
    '#ffcc00',
    '#330099',
    '#990099',
    '#ccff00',
    '#ff0000',
    '#808080',
    '#008f00',
    '#00487d',
    '#b35a00',
    '#b38f00',
    '#6b006b',
    '#8fb300',
    '#b30000',
    '#bebebe',
    '#80ff80',
    '#80c9ff',
    '#ffc080',
    '#ffe680',
    '#aa80ff',
    '#ee00cc',
    '#ff8080',
    '#666600',
    '#ffbfff',
    '#00ffcc',
    '#cc6699',
    '#999900'
];
%>

<div id="mini_timeline"></div>

<div id="mini_timeline_legend" style="display: flex; justify-content: center;">
  <div id="mini_timeline_legend_child">
    <ul style="display:inline-block">
  <% @series.each_with_index do |this_series, color_index|
       color = colors[color_index % colors.size]
     %>
  <li style="display: inline-block" data-benchmark="<%= this_series[:benchmark] %>"><span style='background: <%= color %>'>&nbsp;&nbsp; <strong style="color: white;"><%= this_series[:platform] %> <%= this_series[:benchmark] %></strong> &nbsp;&nbsp;</span> </li>
  <% end %>
    </ul>
  </div>
</div>

<div class="timeline-report-explanation">
  Y axis values are the total number of seconds to run the benchmark one time - lower is better.
</div>

<script>

// set the dimensions and margins of the graph
var outerMargin = 10,
    fullWidth = 800,
    fullHeight = 400,
    width = fullWidth - 2 * outerMargin,
    height = fullHeight - 2 * outerMargin,
    axisHeight = 50, // Each horizontal axis is this tall
    axisWidth = 60,  // Each vertical axis is this wide
    subgraphWidth = (width - 2 * axisWidth) / 2.0,
    subgraphHeight = (height - 2 * axisHeight) / 2.0
    ;

// append the svg object to the body of the page
var realSVG = d3.select("#mini_timeline")
  .append("svg")
    .attr("viewBox", "0 0 " + fullWidth + " " + fullHeight)
    .attr("xmlns", "http://www.w3.org/2000/svg")
    .attr("xmlns:xlink", "http://www.w3.org/1999/xlink")

// This is the non-blank center area of the graph, inside the margins
var svg = realSVG.append("g")
    .attr("transform",
          "translate(" + outerMargin + "," + outerMargin + ")");

var timeParser = d3.timeParse("%Y %m %d %H %M %S"); // This should match the output format in the report
var timePrinter = d3.timeFormat("%b %d %I%p"); // This is for tooltips
var dataSeries = [
    <% @series.each_with_index do |this_series, color_index| %>
    {
        name: <%= this_series[:name].inspect %>,
        config: <%= this_series[:config].inspect %>,
        benchmark: <%= this_series[:benchmark].inspect %>,
        platform: <%= this_series[:platform].inspect %>,
        data: [ <%= this_series[:data].map { |t, mean, ruby_desc| "{ date: timeParser(#{t.inspect}), value: #{mean}, ruby_desc: #{ruby_desc.inspect} }" }.join(", ") %> ],
        color: <%= colors[color_index % colors.size].inspect %>,
        timeRange: [ timeParser(<%= this_series[:data][0][0].inspect %>), timeParser(<%= this_series[:data][-1][0].inspect %>) ],
        valueRange: [ <%= this_series[:data].map { |pt| pt[1] }.min %>, <%= this_series[:data].map { |pt| pt[1] }.max %> ]
    },
    <% end %>
    {}
]
dataSeries.pop();

subGraphs = [
  {
    xOffset: 0,
    yOffset: 0,
    series: [],
  },
  {
    xOffset: width / 2.0,
    yOffset: 0,
    series: [],
  },
  {
    xOffset: 0,
    yOffset: height / 2.0,
    series: [],
  },
  {
    xOffset: width / 2.0,
    yOffset: height / 2.0,
    series: [],
  },
];

<% if @series.size == 4 %>
subGraphs[0].series = [dataSeries[0]];
subGraphs[1].series = [dataSeries[1]];
subGraphs[2].series = [dataSeries[2]];
subGraphs[3].series = [dataSeries[3]];
<% else %>
// For each benchmark, we get the x86 series and then the ARM series
subGraphs[0].series = [dataSeries[0], dataSeries[1]];
subGraphs[1].series = [dataSeries[2], dataSeries[3]];
subGraphs[2].series = [dataSeries[4], dataSeries[5]];
subGraphs[3].series = [dataSeries[6], dataSeries[7]];
<% end %>

subGraphs.forEach(function(subGraph) {
  var quadrant = svg.append("g")
    .attr("class", "quadrant")
    .attr("transform",
          "translate(" + subGraph.xOffset + "," + subGraph.yOffset + ")");

  var extent;
  var valueMin;
  var valueMax;
  if(subGraph.series.length == 1) {
    extent = subGraph.series[0].timeRange;
    valueMin = subGraph.series[0].valueRange[0];
    valueMax = subGraph.series[0].valueRange[1];
  } else {
    var tr1 = subGraph.series[0].timeRange;
    var tr2 = subGraph.series[1].timeRange;
    extent = [ Math.min(tr1[0], tr2[0]), Math.max(tr1[1], tr2[1]) ]
    var vr1 = subGraph.series[0].valueRange;
    var vr2 = subGraph.series[1].valueRange;
    valueMin = Math.min(vr1[0], vr2[0]);
    valueMax = Math.max(vr1[1], vr2[1]);
  }

  var x = d3.scaleTime()
    .domain(d3.extent(extent))
    .range([ 0, subgraphWidth ]);

  var subgraph = quadrant.append("g")
    .attr("class", "subgraph")
    .attr("transform", "translate(" + axisWidth + ",0)")
    ;

  subgraph.append("g")
    .attr("transform", "translate(0," + subgraphHeight + ")")
    .attr("class", "subgraphBottomAxis")
    .call(d3.axisBottom(x))
      .selectAll("text")
        .attr("transform", "rotate(-60)")
        .style("text-anchor", "end");

  var valueSpan = valueMax - valueMin;
  var scaledValueRange = [ valueMin - 0.1 * valueSpan, valueMax + 0.1 * valueSpan ];

  var y = d3.scaleLinear()
    .domain([0, scaledValueRange[1]])
    .range([ subgraphHeight, 0 ]);
  var yAxis = d3.axisLeft(y)
    .ticks(6);

  var group = subgraph.append("g")
    .attr("class", "subgraphLeftAxis")
    .call(yAxis)
    ;

  subGraph.series.forEach(function(thisSeries) {
    var graphLine = subgraph.append("path")
      .datum(thisSeries.data)
      .attr("fill", "none")
      .attr("stroke", thisSeries.color)
      .attr("stroke-width", 2.5)
      .attr("d", d3.line()
        .x(function (d) { return x(d.date); })
        .y(function (d) { return y(d.value); })
        )
      ;

    // Add a circle at each datapoint
    var circles = group.selectAll("circle.tooltippage." + thisSeries.name)
      .data(thisSeries.data);
    circles.enter().append("circle")
      .attr("class", "tooltippage " + thisSeries.name)
      .attr("fill", thisSeries.color)
      .attr("fill-opacity", 0.0)
      .attr("r", 5.0)
      .attr("cx", function(d) { return x(d.date) } )
      .attr("cy", function(d) { return y(d.value) } )
      .attr("data-tooltip", function(d) { return thisSeries.benchmark + " at " + timePrinter(d.date) + ": " + d.value.toFixed(1) + " sec<br/>" + thisSeries.platform + " Ruby " + d.ruby_desc; } )
      ;

  })
});

</script>
